<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="ALL" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="9f37234e-4515-4d4c-90d0-42f2bffa279d" name="Changes" comment="profiles are added --&gt; after logging in, user can see, update and delete their own profiles &#10;updateprofiledto is added&#10;middleware, token generators and verificators are updated due to the changes made&#10;in main, a new group called profile is added to minimize process">
      <change afterPath="$PROJECT_DIR$/internal/domain/service/user_deleteprofile_service.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/internal/domain/service/user_getprofile_service.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/internal/domain/service/user_updateprofile_service.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/internal/dto/user_updateprofile.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/internal/handler/user_deleteprofile_handler.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/internal/handler/user_getprofile_handler.go" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/internal/handler/user_updateprofile_handler.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources/ceb1f2cf-ee7e-4d56-b3a1-b9ff020e1250.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/ceb1f2cf-ee7e-4d56-b3a1-b9ff020e1250.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/dataSources/ceb1f2cf-ee7e-4d56-b3a1-b9ff020e1250/storage_v2/_src_/database/postgres.edMnLQ/schema/public.abK9xQ.meta" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/dataSources/ceb1f2cf-ee7e-4d56-b3a1-b9ff020e1250/storage_v2/_src_/database/postgres.edMnLQ/schema/public.abK9xQ.meta" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/cmd/main.go" beforeDir="false" afterPath="$PROJECT_DIR$/cmd/main.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/domain/service/user_refreshtoken_service.go" beforeDir="false" afterPath="$PROJECT_DIR$/internal/domain/service/user_refreshtoken_service.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/domain/service/user_service.go" beforeDir="false" afterPath="$PROJECT_DIR$/internal/domain/service/user_service.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/dto/user_refreshtoken.go" beforeDir="false" afterPath="$PROJECT_DIR$/internal/dto/user_refreshtoken.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/dto/user_token.go" beforeDir="false" afterPath="$PROJECT_DIR$/internal/dto/user_token.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/handler/user_login_handler.go" beforeDir="false" afterPath="$PROJECT_DIR$/internal/handler/user_login_handler.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/handler/user_refreshtoken_handler.go" beforeDir="false" afterPath="$PROJECT_DIR$/internal/handler/user_refreshtoken_handler.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/helper/verifytoken_helper.go" beforeDir="false" afterPath="$PROJECT_DIR$/internal/helper/verifytoken_helper.go" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/internal/middleware/user_authentication_middleware.go" beforeDir="false" afterPath="$PROJECT_DIR$/internal/middleware/user_authentication_middleware.go" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExportToHTMLSettings">
    <option name="OUTPUT_DIRECTORY" value="$PROJECT_DIR$/../firstGoProject\exportToHTML" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Go File" />
      </list>
    </option>
  </component>
  <component name="GOROOT" url="file://$PROJECT_DIR$/../../../../Program Files/Go" />
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="CRUD-Update-with-DTO" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;gghinzu&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/gghinzu/firstGoProject.git&quot;,
    &quot;accountId&quot;: &quot;527d98c0-4139-4b83-b29f-ea33031181b2&quot;
  }
}</component>
  <component name="HighlightingSettingsPerFile">
    <setting file="file://$PROJECT_DIR$/internal/handler/user_handler.go" root0="FORCE_HIGHLIGHTING" />
  </component>
  <component name="KubernetesApiPersistence">{}</component>
  <component name="KubernetesApiProvider">{
  &quot;isMigrated&quot;: true
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 6
}</component>
  <component name="ProjectId" id="2sIgnKfn3I42MgmWLfs7qZYXLwj" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "DefaultGoTemplateProperty": "Go File",
    "Go Build.go build firstGoProject/cmd.executor": "Run",
    "Go Build.go build main.go.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "RunOnceActivity.git.unshallow": "true",
    "RunOnceActivity.go.formatter.settings.were.checked": "true",
    "RunOnceActivity.go.migrated.go.modules.settings": "true",
    "RunOnceActivity.go.modules.go.list.on.any.changes.was.set": "true",
    "git-widget-placeholder": "main",
    "go.import.settings.migrated": "true",
    "last_opened_file_path": "C:/Users/lenovo/GolandProjects/firstGoProject",
    "node.js.detected.package.eslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "onboarding.tips.debug.path": "C:/Users/lenovo/GolandProjects/firstGoProject/main.go",
    "settings.editor.selected.configurable": "preferences.customizations"
  },
  "keyToStringList": {
    "DatabaseDriversLRU": [
      "postgresql"
    ]
  }
}]]></component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\lenovo\GolandProjects\firstGoProject" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\lenovo\GolandProjects\firstGoProject\internal\dto" />
      <recent name="C:\Users\lenovo\GolandProjects\firstGoProject" />
      <recent name="C:\Users\lenovo\GolandProjects\firstGoProject\internal" />
      <recent name="C:\Users\lenovo\GolandProjects\firstGoProject\internal\domain" />
      <recent name="C:\Users\lenovo\GolandProjects\firstGoProject\internal\domain\enum" />
    </key>
  </component>
  <component name="RunManager" selected="Go Build.go build firstGoProject/cmd">
    <configuration name="go build firstGoProject/cmd" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="firstGoProject" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="firstGoProject/cmd" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/cmd/main.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build firstGoProject/cmd" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="firstGoProject" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="PACKAGE" />
      <package value="firstGoProject/cmd" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/cmd/main.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build main.go" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="firstGoProject" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <package value="firstGoProject" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/main.go" />
      <method v="2" />
    </configuration>
    <configuration name="go build main.go" type="GoApplicationRunConfiguration" factoryName="Go Application" temporary="true" nameIsGenerated="true">
      <module name="firstGoProject" />
      <working_directory value="$PROJECT_DIR$" />
      <kind value="FILE" />
      <package value="firstGoProject" />
      <directory value="$PROJECT_DIR$" />
      <filePath value="$PROJECT_DIR$/main.go" />
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Go Build.go build firstGoProject/cmd" />
        <item itemvalue="Go Build.go build main.go" />
        <item itemvalue="Go Build.go build firstGoProject/cmd" />
        <item itemvalue="Go Build.go build main.go" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="RECENT_FILTERS">
      <map>
        <entry key="Branch">
          <value>
            <list>
              <RecentGroup>
                <option name="FILTER_VALUES">
                  <option value="origin/main" />
                </option>
              </RecentGroup>
            </list>
          </value>
        </entry>
      </map>
    </option>
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State>
              <option name="CUSTOM_BOOLEAN_PROPERTIES">
                <map>
                  <entry key="Show.Git.Branches" value="true" />
                </map>
              </option>
            </State>
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="a go project which is displaying the written user-list (in the code) as plain text &amp; parsing id value from url, given id helps to display specific user with details." />
    <MESSAGE value="gin framework is added and all the files edited according to it&#10;now, outputs are no longer plain-text, they are all json" />
    <MESSAGE value="tried to apply hexagonal architecture to the directory structure&#10;handlers, local repos, external repos and services are seperated now&#10;interfaces and structures are implemented&#10;updated main&#10;tidied up mod file" />
    <MESSAGE value="CRUD (delete) operation is added&#10;project structure has been changed&#10;user_service and user_handler files are generified and their operations are seperated" />
    <MESSAGE value="CRUD (update) operation is added and all the related files are updated according to this change" />
    <MESSAGE value="CRUD (update) operation is designed with DTO" />
    <MESSAGE value="CRUD (create) operation is designed with DTO&#10;DTO - entity conversion is handled basically in the server layer" />
    <MESSAGE value="active and passive statuses are added to entity&#10;activate and passivate processes are added&#10;enums are implemented&#10;displaying all the active/all the passive users are implemented&#10;users are being added as passive in the creation phase" />
    <MESSAGE value="searching for name option is added, but it's case-sensitive&#10;updating status option is improved (activate and passivate are not seperated now)" />
    <MESSAGE value="error messages are rearranged and fixed&#10;soft deletion is added (may be fixed in further phases)&#10;updating processes are blocked for soft deleted users" />
    <MESSAGE value="search option is better now (it's not waiting for parameters in main, it gets the params from postman side &amp; it is case-insensitive now)" />
    <MESSAGE value="gender is turned into an enum&#10;searchdto is added&#10;search part is updated (handler, service and repo layers use searchdto to make the process easier and flexible)&#10;softdelete is updated (it uses 'status' instead of 'deleted' attribute of user entity)&#10;error handling is updated in the repository part to see the errors clearly (if any)&#10;new userstatus is added to enums (not initialized)&#10;general bug fixes &amp; tidying up" />
    <MESSAGE value="pointer to json binding is handled with gin.ShouldBindQuery and search dto is updated according to it (now, we can check null pointers instead of empty strings)&#10;dto files is seperated from base entity now" />
    <MESSAGE value="ids are not consecutive anymore -- they're being generated by uuids&#10;search, delete, update etc. processes are done with uuids&#10;getallusers is removed -- it is being handled with search&#10;getuserbystatus is removed -- it is being handled with search (filtering)&#10;softdelete is removed -- it is being handled with search (status update) -- new status value is getting parsed from url --&gt; it may be gotten from dto in further phases&#10;endpoints are tried to make standardized -- some keywords aren't written explicitly now, to the url&#10;error messages/json codes should be updated soon, because they aren't appropriate" />
    <MESSAGE value="pagination is implemented for search(list) users -- might be updated soon -- page and limit are added into searchdto as pointers" />
    <MESSAGE value="user roles are added (as admin and user)&#10;user_roles and users tables are connected via roleid foreignkeys&#10;roles will be updated and ids will not be used in creation &amp; dto conversion&#10;creation and deletion messages are updated" />
    <MESSAGE value="user roles are added (as admin and user)&#10;user_roles and users tables are connected via roleid foreignkeys&#10;roles will be updated and ids will not be used in creation &amp; dto conversion&#10;creation and deletion messages are updated&#10;preload query is added to getallusers to load the inner table" />
    <MESSAGE value="bug fixes in repo layer" />
    <MESSAGE value="roleid is no longer used in the creation process, users are saved as a 'user' by default&#10;if there's no record in users database, a seed user (as an admin) is created automatically by default&#10;error messages and json codes are updated&#10;uuid parsing from url is improved&#10;createuserdto is updated according to the changes in repo and service layer of creation -- roleid is automatically set by the role name of the user" />
    <MESSAGE value="signupdto, logindto, and tokendto are added&#10;email, password, token fields are added to base entity&#10;register and login processes are handled by servers, handlers and repo&#10;authentication middleware is created and authentication-required processes and methods are seperated and handled by it&#10;grouping is handled in the main, requests that need authentication are grouped together&#10;for storing the password in the database, encrytion and decryption processes are handled by helpers&#10;user_jwt is created to create tokens in every login for users --&gt; used custom claims&#10;seed's location is changed&#10;updatetoken function is created in repository layer (don't know if it is necessary or not, might be deleted later)&#10;errors and bugs are tried to be fixed" />
    <MESSAGE value="viper is downloaded and configuration is done &#10;.env file is added&#10;token attribute is deleted from database because we don't need it now&#10;refresh-token is added different than access token -&gt; user can now enter their email and get a new refresh token &#10;admin seed's password is updated (hashed)&#10;refreshtokendto is added&#10;refreshtoken handler and service are added" />
    <MESSAGE value="config struct is relocated&#10;loadconfig is supposed to be in the main but couldn't be handled (might be updated soon)&#10;refreshtoken is updated --&gt; clients no longer provide email, they provide a valid token and get their refresh token&#10;all the dtos are relocated into a new directory" />
    <MESSAGE value="files, their formats and locations are updated -&gt; repos and services are updated based on business logic&#10;all the dtos are seperated now and their helper functions are with the related dtos&#10;searchuser's name is changed as filteruser because it's a filtering process&#10;roleseed is implemented for userrole creation in the migration&#10;default role (user) is decided and coded&#10;init function is added to createtoken files to prevent unnecessary memory usage in every function call&#10;access and refresh token files are seperated now --&gt; their keys are seperated as well --&gt; and they are not being stored in the database because we don't need it&#10;.Table() usage is omitted and .Model() is used rather than that&#10;age is getting from the user as birthdate but stored as int -&gt; might be changed later -&gt; also format is not appropriate for now&#10;postgres related things are removed from .env file because we don't need them&#10;pagination is removed --&gt; will be implemented soon" />
    <MESSAGE value="profiles are added --&gt; after logging in, user can see, update and delete their own profiles &#10;updateprofiledto is added&#10;middleware, token generators and verificators are updated due to the changes made&#10;in main, a new group called profile is added to minimize process" />
    <option name="LAST_COMMIT_MESSAGE" value="profiles are added --&gt; after logging in, user can see, update and delete their own profiles &#10;updateprofiledto is added&#10;middleware, token generators and verificators are updated due to the changes made&#10;in main, a new group called profile is added to minimize process" />
  </component>
  <component name="VgoProject">
    <settings-migrated>true</settings-migrated>
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <default-breakpoints>
        <breakpoint type="DlvErrorBreakpoint" />
      </default-breakpoints>
    </breakpoint-manager>
  </component>
</project>